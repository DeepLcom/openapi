{
  "openapi": "3.0.3",
  "info": {
    "title": "DeepL API Documentation",
    "description": "The DeepL API provides programmatic access to DeepL\u2019s language AI technology.",
    "termsOfService": "https://www.deepl.com/pro-license",
    "contact": {
      "name": "DeepL - Contact us",
      "url": "https://www.deepl.com/contact-us"
    },
    "version": "3.4.0"
  },
  "externalDocs": {
    "description": "DeepL Pro - Plans and pricing",
    "url": "https://www.deepl.com/pro#developer"
  },
  "servers": [
    {
      "url": "https://api.deepl.com",
      "description": "DeepL API Pro"
    },
    {
      "url": "https://api-free.deepl.com",
      "description": "DeepL API Free"
    }
  ],
  "tags": [
    {
      "name": "TranslateText",
      "description": "The text-translation API currently consists of a single endpoint, `translate`, which is described below.\n\nTo learn more about context in DeepL API translations, we recommend [this article](https://www.deepl.com/docs-api/general/working-with-context)."
    },
    {
      "name": "TranslateDocuments",
      "description": "The document translation API allows you to translate whole documents and supports the following file types and extensions:\n  * `docx` - Microsoft Word Document\n  * `pptx` - Microsoft PowerPoint Document\n  * `xlsx` - Microsoft Excel Document\n  * `pdf` - Portable Document Format\n  * `htm / html` - HTML Document\n  * `txt` - Plain Text Document\n  * `xlf / xliff` - XLIFF Document, version 2.1\n  * `srt` - SRT Document\n\nPlease note that with every submitted document of type .pptx, .docx, .xlsx, or .pdf,\nyou are billed a minimum of 50,000 characters with the DeepL API plan,\nno matter how many characters are included in the document.\n\n\nTranslating a document usually involves three types of HTTP requests:\n  - [upload](https://www.deepl.com/docs-api/documents/translate-document) the document to be translated,\n  - periodically [check the status](https://www.deepl.com/docs-api/documents/get-document-status) of the document translation,\n  - once the status call reports `done`, [download](https://www.deepl.com/docs-api/documents/download-document) the translated document.\n\n\nTo learn more about context in DeepL API translations, we recommend [this article](https://www.deepl.com/docs-api/general/working-with-context)."
    },
    {
      "name": "RephraseText",
      "description": "The `rephrase` endpoint  is used to make corrections and adjustments to texts based on style or tone.\n\nFor more details, visit [this documentation page](https://developers.deepl.com/docs/api-reference/improve-text)"
    },
    {
      "name": "ManageMultilingualGlossaries",
      "description": "The *glossary* functions allow you to create, inspect, edit and delete glossaries.\nGlossaries created with the glossary function can be used in translate requests by specifying the\n`glossary_id` parameter. A glossary contains (several) dictionaries.\nA dictionary is a mapping of source phrases to target phrases for a single language pair.\nIf you encounter issues, please let us know at support@DeepL.com.\n\nCurrently you can create glossaries with any of the languages DeepL supports.\n\nThe maximum size limit for a glossary is 10 MiB = 10485760 bytes and each source/target text,\nas well as the name of the glossary, is limited to 1024 UTF-8 bytes.\nA total of 1000 glossaries are allowed per account.\n\nWhen creating a dictionary with target language `EN`, `PT`, or `ZH`, it's not necessary to specify a variant\n(e.g. `EN-US`, `EN-GB`, `PT-PT`, `PT-BR`, or `ZH-HANS`).\nDictionaries with target language `EN` can be used in translations with either English variant.\nSimilarly `PT`, and `ZH` dictionaries can be used in translations with their corresponding variants.\n(When you provide the ID of a glossary to a translation, the appropriate dictionary is automatically applied. Currently glossaries can not yet be used with source language detection.)\n\nGlossaries created via the DeepL API are now unified with glossaries created via the DeepL website and DeepL apps.\nPlease only use the v3 glossary API in conjunction with multilingual or edited glossaries from the website."
    },
    {
      "name": "ManageGlossaries",
      "description": "Please note that this is the spec for the (old) v2 glossary endpoint.\nWe recommend users switch to the newer v3 glossary endpoints, which support editability and multilinguality.\n\nThe *glossary* functions allow you to create, inspect, and delete glossaries.\nGlossaries created with the glossary function can be used in translate requests by specifying the\n`glossary_id` parameter.\nIf you encounter issues, please let us know at support@DeepL.com.\n\nCurrently you can create glossaries with any of the languages DeepL supports.\n\nThe maximum size limit for a glossary is 10 MiB = 10485760 bytes and each source/target text,\nas well as the name of the glossary, is limited to 1024 UTF-8 bytes.\nA total of 1000 glossaries are allowed per account.\n\nWhen creating a glossary with target language `EN`, `PT`, or `ZH`, it's not necessary to specify a variant\n(e.g. `EN-US`, `EN-GB`, `PT-PT`, `PT-BR`, or `ZH-HANS`).\nGlossaries with target language `EN` can be used in translations with either English variant.\nSimilarly `PT`, and `ZH` glossaries can be used in translations with their corresponding variants.\n\nNote that on the v2 API, glossaries are immutable: once created, the glossary entries for a given glossary ID cannot be modified.\n\nAs a workaround for effectively editable glossaries, we suggest to identify glossaries by name instead of ID in your application\nand then use the following procedure for modifications:\n- [download](https://www.deepl.com/docs-api/glossaries/get-glossary-entries) and store the current glossary's entries,\n- locally modify the glossary entries,\n- [delete](https://www.deepl.com/docs-api/glossaries/delete-glossary) the existing glossary,\n- [create a new glossary](https://www.deepl.com/docs-api/glossaries/create-glossary) with the same name."
    },
    {
      "name": "MetaInformation",
      "description": "Information about API usage and value ranges"
    }
  ],
  "paths": {
    "/v2/translate": {
      "post": {
        "tags": [
          "TranslateText"
        ],
        "summary": "Request Translation",
        "operationId": "translateText",
        "description": "The translate function.\n\n\nThe total request body size must not exceed 128 KiB (128 \u00b7 1024 bytes). Please split up your text into multiple\ncalls if it exceeds this limit.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text",
                  "target_lang"
                ],
                "properties": {
                  "text": {
                    "description": "Text to be translated. Only UTF-8-encoded plain text is supported. The parameter may be specified\nmultiple times and translations are returned in the same order as they are requested. Each of the\nparameter values may contain multiple sentences.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "Hello, World!"
                    }
                  },
                  "source_lang": {
                    "$ref": "#/components/schemas/SourceLanguageText"
                  },
                  "target_lang": {
                    "$ref": "#/components/schemas/TargetLanguageText"
                  },
                  "context": {
                    "$ref": "#/components/schemas/Context"
                  },
                  "show_billed_characters": {
                    "$ref": "#/components/schemas/ShowBilledCharacters"
                  },
                  "split_sentences": {
                    "$ref": "#/components/schemas/SplitSentencesOption"
                  },
                  "preserve_formatting": {
                    "$ref": "#/components/schemas/PreserveFormattingOption"
                  },
                  "formality": {
                    "$ref": "#/components/schemas/Formality"
                  },
                  "model_type": {
                    "$ref": "#/components/schemas/ModelType"
                  },
                  "glossary_id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GlossaryId"
                      },
                      {
                        "description": "Specify the glossary to use for the translation. **Important:** This requires the `source_lang`\nparameter to be set and the language pair of the glossary has to match the language pair of the\nrequest.",
                        "type": "string"
                      }
                    ]
                  },
                  "tag_handling": {
                    "$ref": "#/components/schemas/TagHandlingOption"
                  },
                  "outline_detection": {
                    "$ref": "#/components/schemas/OutlineDetectionOption"
                  },
                  "non_splitting_tags": {
                    "$ref": "#/components/schemas/NonSplittingTagList"
                  },
                  "splitting_tags": {
                    "$ref": "#/components/schemas/SplittingTagList"
                  },
                  "ignore_tags": {
                    "$ref": "#/components/schemas/IgnoreTagList"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "examples": {
                "Basic": {
                  "summary": "Basic Example",
                  "value": {
                    "text": [
                      "Hello, world!"
                    ],
                    "target_lang": "DE"
                  }
                },
                "Glossary": {
                  "summary": "Using a Glossary",
                  "value": {
                    "text": [
                      "Hello, world!"
                    ],
                    "target_lang": "DE",
                    "source_lang": "EN",
                    "glossary_id": "[yourGlossaryId]"
                  }
                },
                "MultipleSentences": {
                  "summary": "Multiple Sentences",
                  "value": {
                    "text": [
                      "The table is green. The chair is black."
                    ],
                    "target_lang": "DE"
                  }
                },
                "LargeVolumes": {
                  "summary": "Large Volumes of Text",
                  "value": {
                    "text": [
                      "This is the first sentence.",
                      "This is the second sentence.",
                      "This is the third sentence."
                    ],
                    "target_lang": "DE"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "text",
                  "target_lang"
                ],
                "properties": {
                  "text": {
                    "description": "Text to be translated. Only UTF-8-encoded plain text is supported. The parameter may be specified multiple times and translations are returned in the same order as they are requested. Each of the parameter values may contain multiple sentences.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "source_lang": {
                    "$ref": "#/components/schemas/SourceLanguageText"
                  },
                  "target_lang": {
                    "$ref": "#/components/schemas/TargetLanguageText"
                  },
                  "context": {
                    "$ref": "#/components/schemas/Context"
                  },
                  "show_billed_characters": {
                    "$ref": "#/components/schemas/ShowBilledCharacters"
                  },
                  "split_sentences": {
                    "$ref": "#/components/schemas/SplitSentencesOption"
                  },
                  "preserve_formatting": {
                    "$ref": "#/components/schemas/PreserveFormattingOptionStr"
                  },
                  "formality": {
                    "$ref": "#/components/schemas/Formality"
                  },
                  "model_type": {
                    "$ref": "#/components/schemas/ModelType"
                  },
                  "glossary_id": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GlossaryId"
                      }
                    ],
                    "description": "Specify the glossary to use for the translation. **Important:** This requires the `source_lang` parameter to be set and the language pair of the glossary has to match the language pair of the request."
                  },
                  "tag_handling": {
                    "$ref": "#/components/schemas/TagHandlingOption"
                  },
                  "outline_detection": {
                    "$ref": "#/components/schemas/OutlineDetectionOptionStr"
                  },
                  "non_splitting_tags": {
                    "$ref": "#/components/schemas/NonSplittingTagCommaSeparatedList"
                  },
                  "splitting_tags": {
                    "$ref": "#/components/schemas/SplittingTagCommaSeparatedList"
                  },
                  "ignore_tags": {
                    "$ref": "#/components/schemas/IgnoreTagCommaSeparatedList"
                  }
                }
              },
              "encoding": {
                "text": {
                  "style": "form",
                  "explode": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The translate function returns a JSON representation of the translations in the order the text parameters have been specified.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "translations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "detected_source_language": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/SourceLanguage"
                              }
                            ],
                            "description": "The language detected in the source text. It reflects the value of the `source_lang` parameter, when specified."
                          },
                          "text": {
                            "description": "The translated text.",
                            "type": "string"
                          },
                          "billed_characters": {
                            "description": "Number of characters counted by DeepL for billing purposes. Only present if the show_billed_characters parameter is set to true.",
                            "type": "integer"
                          },
                          "model_type_used": {
                            "description": "Indicates the translation model used. Only present if model_type parameter is included in the request.",
                            "type": "string",
                            "example": "quality_optimized"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Basic": {
                    "value": {
                      "translations": [
                        {
                          "detected_source_language": "EN",
                          "text": "Hallo, Welt!",
                          "billed_characters": 42
                        }
                      ]
                    }
                  },
                  "Glossary": {
                    "value": {
                      "translations": [
                        {
                          "text": "Hallo, Welt!"
                        }
                      ]
                    }
                  },
                  "MultipleSentences": {
                    "value": {
                      "translations": [
                        {
                          "detected_source_language": "EN",
                          "text": "Der Tisch ist gr\u00fcn. Der Stuhl ist schwarz."
                        }
                      ]
                    }
                  },
                  "LargeVolumes": {
                    "value": {
                      "translations": [
                        {
                          "detected_source_language": "EN",
                          "text": "Das ist der erste Satz."
                        },
                        {
                          "detected_source_language": "EN",
                          "text": "Das ist der zweite Satz."
                        },
                        {
                          "detected_source_language": "EN",
                          "text": "Dies ist der dritte Satz."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "414": {
            "$ref": "#/components/responses/URITooLong"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "504": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/document": {
      "post": {
        "tags": [
          "TranslateDocuments"
        ],
        "summary": "Upload and Translate a Document",
        "operationId": "translateDocument",
        "description": "This call uploads a document and queues it for translation.\nThe call returns once the upload is complete, returning a document ID and key which can be used to\n[query the translation status](https://www.deepl.com/docs-api/documents/get-document-status)\nand to [download the translated document](https://www.deepl.com/docs-api/documents/download-document) once translation is complete.\n\n\n\nBecause the request includes a file upload, it must be an HTTP POST request with content type `multipart/form-data`.\n\n\nPlease be aware that the uploaded document is automatically removed from the server once the translated document has been downloaded.\nYou have to upload the document again in order to restart the translation.\n\n\nThe maximum upload limit for documents is [available here](https://support.deepl.com/hc/articles/360020582359-Document-formats)\nand may vary based on API plan and document type.\n\n\nYou may specify the glossary to use for the document translation using the `glossary_id` parameter.\n**Important:** This requires the `source_lang` parameter to be set and the language pair of the glossary has to match the language pair of the request.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "examples": {
                "Basic": {
                  "summary": "Basic Document Translation",
                  "value": {
                    "target_lang": "DE",
                    "file": "@document.docx"
                  }
                },
                "Glossary": {
                  "summary": "Using a Glossary",
                  "value": {
                    "source_lang": "EN",
                    "target_lang": "DE",
                    "file": "@document.docx",
                    "glossary_id": "[yourGlossaryId]"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "target_lang",
                  "file"
                ],
                "properties": {
                  "source_lang": {
                    "$ref": "#/components/schemas/SourceLanguage"
                  },
                  "target_lang": {
                    "$ref": "#/components/schemas/TargetLanguage"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The document file to be translated. The file name should be included in this part's content disposition. As an alternative, the filename parameter can be used. The following file types and extensions are supported:\n  * `docx` - Microsoft Word Document\n  * `pptx` - Microsoft PowerPoint Document\n  * `xlsx` - Microsoft Excel Document\n  * `pdf` - Portable Document Format\n  * `htm / html` - HTML Document\n  * `txt` - Plain Text Document\n  * `xlf / xliff` - XLIFF Document, version 2.1\n  * `srt` - SRT Document"
                  },
                  "filename": {
                    "type": "string",
                    "description": "The name of the uploaded file. Can be used as an alternative to including the file name in the file part's content disposition."
                  },
                  "output_format": {
                    "type": "string",
                    "description": "File extension of desired format of translated file, for example: `docx`. If unspecified, by default the translated file will be in the same format as the input file.\n\nNote: Not all combinations of input file and translation file extensions are permitted. See [Document Format Conversions](https://www.deepl.com/docs-api/documents/format-conversions) for the permitted combinations."
                  },
                  "formality": {
                    "$ref": "#/components/schemas/Formality"
                  },
                  "glossary_id": {
                    "$ref": "#/components/schemas/GlossaryId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The document function returns a JSON object containing the ID and encryption key assigned to the uploaded document. Once received by the server, uploaded documents are immediately encrypted using a uniquely generated encryption key. This key is not persistently stored on the server. Therefore, it must be stored by the client and sent back to the server with every subsequent request that refers to this particular document.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "document_id": {
                      "description": "A unique ID assigned to the uploaded document and the translation process. Must be used when referring to this particular document in subsequent API requests.",
                      "type": "string"
                    },
                    "document_key": {
                      "description": "A unique key that is used to encrypt the uploaded document as well as the resulting translation on the server side. Must be provided with every subsequent API request regarding this particular document.",
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "document_id": "04DE5AD98A02647D83285A36021911C6",
                  "document_key": "0CB0054F1C132C1625B392EADDA41CB754A742822F6877173029A6C487E7F60A"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "504": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/document/{document_id}": {
      "post": {
        "tags": [
          "TranslateDocuments"
        ],
        "summary": "Check Document Status",
        "description": "Retrieve the current status of a document translation process.\nIf the translation is still in progress, the estimated time remaining is also included in the response.",
        "operationId": "getDocumentStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/DocumentID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentKey"
              },
              "examples": {
                "basic": {
                  "summary": "Basic",
                  "value": {
                    "document_key": "0CB0054F1C132C1625B392EADDA41CB754A742822F6877173029A6C487E7F60A"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The document status request returns a JSON object containing the document ID that was used in the request as well as string indicating the current status of the translation process. While the translation is running, the estimated number of seconds remaining until the process is done is also included in the response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "document_id",
                    "status"
                  ],
                  "properties": {
                    "document_id": {
                      "description": "A unique ID assigned to the uploaded document and the requested translation process. The same ID that was used when requesting the translation status.",
                      "type": "string"
                    },
                    "status": {
                      "description": "A short description of the state the document translation process is currently in. Possible values are:\n * `queued` - the translation job is waiting in line to be processed\n * `translating` - the translation is currently ongoing\n * `done` - the translation is done and the translated document is ready for download\n * `error` - an irrecoverable error occurred while translating the document",
                      "type": "string",
                      "enum": [
                        "queued",
                        "translating",
                        "done",
                        "error"
                      ]
                    },
                    "seconds_remaining": {
                      "description": "Estimated number of seconds until the translation is done.\nThis parameter is only included while `status` is `\"translating\"`.",
                      "type": "integer"
                    },
                    "billed_characters": {
                      "description": "The number of characters billed to your account. The characters will only be billed after a successful download request.",
                      "type": "integer"
                    },
                    "error_message": {
                      "description": "A short description of the error, if available.\nNote that the content is subject to change.\nThis parameter may be included if an error occurred during translation.",
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "translating": {
                    "summary": "Translating",
                    "value": {
                      "document_id": "04DE5AD98A02647D83285A36021911C6",
                      "status": "translating",
                      "seconds_remaining": 20
                    }
                  },
                  "done": {
                    "summary": "Done",
                    "value": {
                      "document_id": "04DE5AD98A02647D83285A36021911C6",
                      "status": "done",
                      "billed_characters": 1337
                    }
                  },
                  "queued": {
                    "summary": "Queued",
                    "value": {
                      "document_id": "04DE5AD98A02647D83285A36021911C6",
                      "status": "queued"
                    }
                  },
                  "error": {
                    "summary": "Error",
                    "value": {
                      "document_id": "04DE5AD98A02647D83285A36021911C6",
                      "status": "error",
                      "message": "Source and target language are equal."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "504": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/document/{document_id}/result": {
      "post": {
        "tags": [
          "TranslateDocuments"
        ],
        "summary": "Download Translated Document",
        "operationId": "downloadDocument",
        "description": "Once the status of the document translation process is `done`, the result can be downloaded.\n\n\nFor privacy reasons the translated document is automatically removed from the server once it was downloaded and cannot be downloaded again.",
        "parameters": [
          {
            "$ref": "#/components/parameters/DocumentID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DocumentKey"
              },
              "examples": {
                "basic": {
                  "summary": "Basic",
                  "value": {
                    "document_key": "0CB0054F1C132C1625B392EADDA41CB754A742822F6877173029A6C487E7F60A"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The document is provided as a download. There is no other data included in the response besides the document data. The content type used in the response corresponds to the document type.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "examples": {
                  "OK": {
                    "summary": "OK",
                    "description": "binary document data"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound404DocTransDownload"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable503DocTransDownload"
          },
          "504": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/glossary-language-pairs": {
      "get": {
        "tags": [
          "ManageGlossaries"
        ],
        "summary": "List Language Pairs Supported by Glossaries",
        "description": "Retrieve the list of language pairs supported by the glossary feature.",
        "operationId": "listGlossaryLanguages",
        "responses": {
          "200": {
            "description": "A JSON object containing the language pairs in its `supported_languages` property.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supported_languages": {
                      "type": "array",
                      "description": "The list of supported languages",
                      "items": {
                        "type": "object",
                        "required": [
                          "source_lang",
                          "target_lang"
                        ],
                        "properties": {
                          "source_lang": {
                            "description": "The language in which the source texts in the glossary are specified.",
                            "type": "string"
                          },
                          "target_lang": {
                            "description": "The language in which the target texts in the glossary are specified.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "supported_languages": [
                    {
                      "source_lang": "de",
                      "target_lang": "en"
                    },
                    {
                      "source_lang": "en",
                      "target_lang": "de"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v3/glossaries": {
      "post": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "Create a Glossary",
        "operationId": "createMultilingualGlossary",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMultilingualGlossaryParameters"
              },
              "examples": {
                "Basic": {
                  "value": {
                    "name": "My Glossary",
                    "dictionaries": [
                      {
                        "source_lang": "en",
                        "target_lang": "de",
                        "entries": "Hello\tGuten Tag",
                        "entries_format": "tsv"
                      },
                      {
                        "source_lang": "de",
                        "target_lang": "en",
                        "entries": "Guten Tag\tHello",
                        "entries_format": "tsv"
                      }
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateMultilingualGlossaryParameters"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The function for creating a glossary returns a JSON object containing the ID of the newly created glossary and a boolean flag that indicates if the created glossary can already be used in translate requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultilingualGlossary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceededGlossaries"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      },
      "get": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "List all Glossaries",
        "operationId": "listMultilingualGlossaries",
        "description": "List all glossaries and their meta-information, but not the glossary entries.",
        "responses": {
          "200": {
            "description": "JSON object containing a the glossaries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "glossaries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MultilingualGlossary"
                      }
                    }
                  }
                },
                "example": {
                  "glossaries": [
                    {
                      "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
                      "name": "My Glossary",
                      "dictionaries": [
                        {
                          "source_lang": "EN",
                          "target_lang": "DE",
                          "entry_count": 1
                        },
                        {
                          "source_lang": "DE",
                          "target_lang": "EN",
                          "entry_count": 2
                        }
                      ],
                      "creation_time": "2021-08-03T14:16:18.329Z"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v3/glossaries/{glossary_id}": {
      "get": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "Retrieve Glossary Details",
        "description": "Retrieve meta information for a single glossary, omitting the glossary entries.",
        "operationId": "getMultilingualGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object containing the glossary meta-information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultilingualGlossary"
                },
                "example": {
                  "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
                  "name": "My Glossary",
                  "dictionaries": [
                    {
                      "source_lang": "EN",
                      "target_lang": "DE",
                      "creation_time": "2021-08-03T14:16:18.329Z",
                      "entry_count": 1
                    },
                    {
                      "source_lang": "DE",
                      "target_lang": "EN",
                      "creation_time": "2021-08-03T14:16:18.429Z",
                      "entry_count": 2
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      },
      "patch": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "Edit glossary details",
        "description": "Edit glossary details, such as name or a dictionary for a source and target language.",
        "operationId": "patchMultilingualGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchMultilingualGlossaryParameters"
              },
              "examples": {
                "Basic": {
                  "value": {
                    "name": "My Glossary",
                    "dictionaries": [
                      {
                        "source_lang": "en",
                        "target_lang": "de",
                        "entries": "Hello\tGuten Tag",
                        "entries_format": "tsv"
                      }
                    ]
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchMultilingualGlossaryParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON object containing the glossary meta-information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultilingualGlossary"
                },
                "example": {
                  "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
                  "name": "My Glossary",
                  "dictionaries": [
                    {
                      "source_lang": "EN",
                      "target_lang": "DE",
                      "creation_time": "2021-08-03T14:16:18.329Z",
                      "entry_count": 1
                    },
                    {
                      "source_lang": "DE",
                      "target_lang": "EN",
                      "creation_time": "2021-08-03T14:16:18.429Z",
                      "entry_count": 2
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceededGlossaries"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "Delete a Glossary",
        "description": "Deletes the specified glossary.",
        "operationId": "deleteMultilingualGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content upon success."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v3/glossaries/{glossary_id}/entries": {
      "get": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "Retrieve Glossary Entries",
        "operationId": "getMultilingualGlossaryEntries",
        "description": "List the entries of a single glossary in tsv format.",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          },
          {
            "name": "source_lang",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GlossarySourceLanguage"
            }
          },
          {
            "name": "target_lang",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GlossaryTargetLanguage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The entries in tsv, wrapped in a JSON object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlossaryDictionary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v3/glossaries/{glossary_id}/dictionaries": {
      "delete": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "Deletes the dictionary associated with the given language pair with the given glossary ID.",
        "operationId": "deleteDictionary",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          },
          {
            "name": "source_lang",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GlossarySourceLanguage"
            }
          },
          {
            "name": "target_lang",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GlossaryTargetLanguage"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content upon success."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      },
      "put": {
        "tags": [
          "ManageMultilingualGlossaries"
        ],
        "summary": "Replaces or creates a dictionary in the glossary with the specified entries.",
        "operationId": "replaceDictionary",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          }
        ],
        "requestBody": {
          "description": "The dictionary to insert into (or overwrite in) the multilingual glossary.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultilingualGlossaryEntries"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PutMultilingualGlossaryParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JSON object containing the dictionary meta-information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultilingualGlossaryEntriesInformation"
                },
                "example": {
                  "source_lang": "EN",
                  "target_lang": "DE",
                  "entry_count": 1
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceededGlossaries"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/glossaries": {
      "post": {
        "tags": [
          "ManageGlossaries"
        ],
        "summary": "Create a Glossary",
        "operationId": "createGlossary",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGlossaryParameters"
              },
              "examples": {
                "Basic": {
                  "value": {
                    "name": "My Glossary",
                    "source_lang": "en",
                    "target_lang": "de",
                    "entries": "Hello\tGuten Tag",
                    "entries_format": "tsv"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateGlossaryParameters"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The function for creating a glossary returns a JSON object containing the ID of the newly created glossary and a boolean flag that indicates if the created glossary can already be used in translate requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonolingualGlossary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceededGlossaries"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      },
      "get": {
        "tags": [
          "ManageGlossaries"
        ],
        "summary": "List all Glossaries",
        "operationId": "listGlossaries",
        "description": "List all glossaries and their meta-information, but not the glossary entries.",
        "responses": {
          "200": {
            "description": "JSON object containing a the glossaries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "glossaries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MonolingualGlossary"
                      }
                    }
                  }
                },
                "example": {
                  "glossaries": [
                    {
                      "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
                      "name": "My Glossary",
                      "ready": true,
                      "source_lang": "EN",
                      "target_lang": "DE",
                      "creation_time": "2021-08-03T14:16:18.329Z",
                      "entry_count": 1
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/glossaries/{glossary_id}": {
      "get": {
        "tags": [
          "ManageGlossaries"
        ],
        "summary": "Retrieve Glossary Details",
        "description": "Retrieve meta information for a single glossary, omitting the glossary entries.",
        "operationId": "getGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object containing the glossary meta-information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonolingualGlossary"
                },
                "example": {
                  "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
                  "name": "My Glossary",
                  "ready": true,
                  "source_lang": "EN",
                  "target_lang": "DE",
                  "creation_time": "2021-08-03T14:16:18.329Z",
                  "entry_count": 1
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ManageGlossaries"
        ],
        "summary": "Delete a Glossary",
        "description": "Deletes the specified glossary.",
        "operationId": "deleteGlossary",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns no content upon success."
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/glossaries/{glossary_id}/entries": {
      "get": {
        "tags": [
          "ManageGlossaries"
        ],
        "summary": "Retrieve Glossary Entries",
        "operationId": "getGlossaryEntries",
        "description": "List the entries of a single glossary in the format specified by the `Accept` header.",
        "parameters": [
          {
            "$ref": "#/components/parameters/GlossaryID"
          },
          {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": "string",
              "enum": [
                "text/tab-separated-values"
              ],
              "default": "text/tab-separated-values"
            },
            "description": "The requested format of the returned glossary entries. Currently, supports only `text/tab-separated-values`.",
            "examples": {
              "tsv": {
                "summary": "Tab-separated Values",
                "value": {
                  "in": "header",
                  "Accept": "text/tab-separated-values"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The entries in the requested format.",
            "content": {
              "text/tab-separated-values": {
                "example": "Hello!\tGuten Tag!"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestGlossaries"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenGlossaries"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaTypeGlossaries"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/write/rephrase": {
      "post": {
        "tags": [
          "RephraseText"
        ],
        "summary": "Request text improvement",
        "operationId": "rephraseText",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text"
                ],
                "properties": {
                  "text": {
                    "description": "Text to be improved. Only UTF-8-encoded plain text is supported. Improvements are returned in the same order as they are requested.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "this is a example sentence to imprve"
                    }
                  },
                  "target_lang": {
                    "$ref": "#/components/schemas/TargetLanguageWrite"
                  },
                  "writing_style": {
                    "$ref": "#/components/schemas/WritingStyle"
                  },
                  "tone": {
                    "$ref": "#/components/schemas/WritingTone"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "text"
                ],
                "properties": {
                  "text": {
                    "description": "Text to be improved. Only UTF-8-encoded plain text is supported. Improvements are returned in the same order as they are requested.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "this is a example sentence to imprve"
                    }
                  },
                  "target_lang": {
                    "$ref": "#/components/schemas/TargetLanguageWrite"
                  },
                  "writing_style": {
                    "$ref": "#/components/schemas/WritingStyle"
                  },
                  "tone": {
                    "$ref": "#/components/schemas/WritingTone"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful text improvement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "improvements": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "detected_source_language": {
                            "description": "The language detected in the source text.",
                            "type": "string",
                            "example": "en"
                          },
                          "text": {
                            "description": "The improved text.",
                            "type": "string",
                            "example": "This is a sample sentence to improve."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/usage": {
      "get": {
        "tags": [
          "MetaInformation"
        ],
        "summary": "Check Usage and Limits",
        "description": "Retrieve usage information within the current billing period together with the corresponding account limits. Usage is returned for:\n- translated characters\n- translated documents\n- translated documents, team totals (for team accounts only)\n\nCharacter usage includes both text and document translations, and is measured by the source text length in Unicode code points,\nso for example \"A\", \"\u0394\", \"\u3042\", and \"\u6df1\" are each counted as a single character.\n\nDocument usage only includes document translations, and is measured in individual documents.\n\nDepending on the user account type, some usage types will be omitted.\nCharacter usage is only included for developer accounts.\nDocument usage is only included for non-developer accounts, and team-combined document usage is only included for non-developer team accounts.",
        "operationId": "getUsage",
        "responses": {
          "200": {
            "description": "The account's usage and limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponse"
                },
                "examples": {
                  "free": {
                    "summary": "Response for API users not on the Pro plan",
                    "value": {
                      "character_count": 180118,
                      "character_limit": 1250000
                    }
                  },
                  "pro": {
                    "summary": "Response for API Pro users",
                    "value": {
                      "character_count": 5947223,
                      "character_limit": 1000000000000,
                      "products": [
                        {
                          "product_type": "write",
                          "api_key_character_count": 0,
                          "character_count": 5643
                        },
                        {
                          "product_type": "translate",
                          "api_key_character_count": 636,
                          "character_count": 5941580
                        }
                      ],
                      "api_key_character_count": 636,
                      "api_key_character_limit": 1000000000000,
                      "start_time": "2025-05-13T09:18:42Z",
                      "end_time": "2025-06-13T09:18:42Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "504": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/languages": {
      "get": {
        "tags": [
          "MetaInformation"
        ],
        "summary": "Retrieve Supported Languages",
        "description": "Retrieve the list of languages that are currently supported for translation, either as source or target language, respectively.\n\nAs of May 2025, Hebrew (HE), Thai (TH), and Vietnamese (VI) are supported as a source and target language for text translation, \nbut it is not yet supported for document translation. Therefore, they have not yet been added to the `/languages` endpoint. We \nwill add Hebrew, Thai, and Vietnamese to the `/languages` endpoint after document translation support is added.",
        "operationId": "getLanguages",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Sets whether source or target languages should be listed. Possible options are:\n * `source` (default): For languages that can be used in the `source_lang` parameter of [translate](https://www.deepl.com/docs-api/translate-text/translate-text) requests.\n * `target`: For languages that can be used in the `target_lang` parameter of [translate](https://www.deepl.com/docs-api/translate-text/translate-text) requests.",
            "schema": {
              "type": "string",
              "enum": [
                "source",
                "target"
              ],
              "default": "source"
            },
            "examples": {
              "target": {
                "summary": "Target Languages",
                "value": {
                  "in": "query",
                  "type": "target"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON array where each item represents a supported language.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "language",
                      "name"
                    ],
                    "properties": {
                      "language": {
                        "description": "The language code of the given language.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the language in English.",
                        "type": "string"
                      },
                      "supports_formality": {
                        "description": "Denotes formality support in case of a target language listing.",
                        "type": "boolean"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "language": "AR",
                    "name": "Arabic",
                    "supports_formality": false
                  },
                  {
                    "language": "BG",
                    "name": "Bulgarian",
                    "supports_formality": false
                  },
                  {
                    "language": "CS",
                    "name": "Czech",
                    "supports_formality": false
                  },
                  {
                    "language": "DA",
                    "name": "Danish",
                    "supports_formality": false
                  },
                  {
                    "language": "DE",
                    "name": "German",
                    "supports_formality": true
                  },
                  {
                    "language": "EL",
                    "name": "Greek",
                    "supports_formality": false
                  },
                  {
                    "language": "EN-GB",
                    "name": "English (British)",
                    "supports_formality": false
                  },
                  {
                    "language": "EN-US",
                    "name": "English (American)",
                    "supports_formality": false
                  },
                  {
                    "language": "ES",
                    "name": "Spanish",
                    "supports_formality": true
                  },
                  {
                    "language": "ET",
                    "name": "Estonian",
                    "supports_formality": false
                  },
                  {
                    "language": "FI",
                    "name": "Finnish",
                    "supports_formality": false
                  },
                  {
                    "language": "FR",
                    "name": "French",
                    "supports_formality": true
                  },
                  {
                    "language": "HU",
                    "name": "Hungarian",
                    "supports_formality": false
                  },
                  {
                    "language": "ID",
                    "name": "Indonesian",
                    "supports_formality": false
                  },
                  {
                    "language": "IT",
                    "name": "Italian",
                    "supports_formality": true
                  },
                  {
                    "language": "JA",
                    "name": "Japanese",
                    "supports_formality": true
                  },
                  {
                    "language": "KO",
                    "name": "Korean",
                    "supports_formality": false
                  },
                  {
                    "language": "LT",
                    "name": "Lithuanian",
                    "supports_formality": false
                  },
                  {
                    "language": "LV",
                    "name": "Latvian",
                    "supports_formality": false
                  },
                  {
                    "language": "NB",
                    "name": "Norwegian (Bokm\u00e5l)",
                    "supports_formality": false
                  },
                  {
                    "language": "NL",
                    "name": "Dutch",
                    "supports_formality": true
                  },
                  {
                    "language": "PL",
                    "name": "Polish",
                    "supports_formality": true
                  },
                  {
                    "language": "PT-BR",
                    "name": "Portuguese (Brazilian)",
                    "supports_formality": true
                  },
                  {
                    "language": "PT-PT",
                    "name": "Portuguese (European)",
                    "supports_formality": true
                  },
                  {
                    "language": "RO",
                    "name": "Romanian",
                    "supports_formality": false
                  },
                  {
                    "language": "RU",
                    "name": "Russian",
                    "supports_formality": true
                  },
                  {
                    "language": "SK",
                    "name": "Slovak",
                    "supports_formality": false
                  },
                  {
                    "language": "SL",
                    "name": "Slovenian",
                    "supports_formality": false
                  },
                  {
                    "language": "SV",
                    "name": "Swedish",
                    "supports_formality": false
                  },
                  {
                    "language": "TR",
                    "name": "Turkish",
                    "supports_formality": false
                  },
                  {
                    "language": "UK",
                    "name": "Ukrainian",
                    "supports_formality": false
                  },
                  {
                    "language": "ZH",
                    "name": "Chinese (simplified)",
                    "supports_formality": false
                  },
                  {
                    "language": "ZH-HANS",
                    "name": "Chinese (simplified)",
                    "supports_formality": false
                  },
                  {
                    "language": "ZH-HANT",
                    "name": "Chinese (traditional)",
                    "supports_formality": false
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "413": {
            "$ref": "#/components/responses/PayloadTooLarge"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "456": {
            "$ref": "#/components/responses/QuotaExceeded"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "504": {
            "$ref": "#/components/responses/ServiceUnavailable"
          },
          "529": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/admin/developer-keys": {
      "post": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Create a developer key as an admin",
        "operationId": "adminCreateDeveloperKey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "$ref": "#/components/schemas/ApiKeyLabel"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The create function returns a JSON representation of the created API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      },
      "get": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Get all developer keys as an admin",
        "operationId": "adminGetDeveloperKeys",
        "responses": {
          "200": {
            "description": "The get function returns a JSON representation of all developer API keys in the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/admin/developer-keys/deactivate": {
      "put": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Deactivate a developer key as an admin",
        "operationId": "adminDeactivateDeveloperKey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "key_id"
                ],
                "properties": {
                  "key_id": {
                    "$ref": "#/components/schemas/ApiKeyId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The deactivate function returns a JSON representation of the deactivated API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/admin/developer-keys/label": {
      "put": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Rename a developer key as an admin",
        "operationId": "adminRenameDeveloperKey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "key_id",
                  "label"
                ],
                "properties": {
                  "key_id": {
                    "$ref": "#/components/schemas/ApiKeyId"
                  },
                  "label": {
                    "type": "string",
                    "description": "API key label.",
                    "example": "developer key prod"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The set label function returns a JSON representation of the renamed API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    },
    "/v2/admin/developer-keys/limits": {
      "put": {
        "tags": [
          "AdminApi"
        ],
        "summary": "Set developer key usage limits as an admin",
        "operationId": "adminSetDeveloperKeyUsageLimits",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "key_id"
                ],
                "properties": {
                  "key_id": {
                    "$ref": "#/components/schemas/ApiKeyId"
                  },
                  "characters": {
                    "$ref": "#/components/schemas/ApiKeyUsageCharacters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The set usage limits function returns a JSON representation of the modified API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "auth_header": []
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "DocumentID": {
        "name": "document_id",
        "description": "The document ID that was sent to the client when the document was uploaded to the API.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "04DE5AD98A02647D83285A36021911C6"
      },
      "GlossaryID": {
        "name": "glossary_id",
        "description": "A unique ID assigned to the glossary.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SourceLanguage": {
        "name": "source_lang",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/SourceLanguage"
        }
      },
      "TargetLanguage": {
        "name": "target_lang",
        "in": "query",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TargetLanguage"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request. Please check error message and your parameters."
      },
      "BadRequestGlossaries": {
        "description": "Bad request. Please check error message and your parameters.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "Generic description of the error.",
                  "type": "string"
                },
                "detail": {
                  "description": "More specific description of the error.",
                  "type": "string"
                }
              }
            },
            "example": {
              "message": "Invalid glossary entries provided",
              "detail": "Key with the index 1 (starting at position 13) duplicates key with the index 0 (starting at position 0)"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authorization failed. Please supply a valid `DeepL-Auth-Key` via the `Authorization` header."
      },
      "Forbidden": {
        "description": "Authorization failed. Please supply a valid `DeepL-Auth-Key` via the `Authorization` header."
      },
      "ForbiddenGlossaries": {
        "description": "Forbidden. The access to the requested resource is denied, because of insufficient access rights."
      },
      "NotFound": {
        "description": "The requested resource could not be found."
      },
      "NotFound404DocTransDownload": {
        "description": "Trying to download a document using a non-existing document ID or the wrong document key will result in a 404 error. As stated above, documents can only be downloaded once before they are deleted from the server and their document ID is invalidated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentTranslationError"
            },
            "examples": {
              "NotFound": {
                "summary": "Not Found",
                "value": {
                  "message": "Document not found"
                }
              }
            }
          }
        }
      },
      "PayloadTooLarge": {
        "description": "The request size exceeds the limit."
      },
      "URITooLong": {
        "description": "The request URL is too long. You can avoid this error by using a POST request instead of a GET request, and sending the parameters in the HTTP body."
      },
      "UnsupportedMediaTypeGlossaries": {
        "description": "The requested entries format specified in the `Accept` header is not supported."
      },
      "TooManyRequests": {
        "description": "Too many requests. Please wait and resend your request."
      },
      "QuotaExceeded": {
        "description": "Quota exceeded. The character limit has been reached."
      },
      "QuotaExceededGlossaries": {
        "description": "Quota exceeded. The glossary creation limit has been reached."
      },
      "InternalServerError": {
        "description": "Internal error."
      },
      "ServiceUnavailable": {
        "description": "Resource currently unavailable. Try again later."
      },
      "ServiceUnavailable503DocTransDownload": {
        "description": "A 503 result will be returned if the user tries to download a translated document that is currently being processed and is not yet ready for download.\nPlease make sure to check that the document status is 'done' before trying to send a download request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DocumentTranslationError"
            },
            "examples": {
              "AlreadyDownloaded": {
                "summary": "Already Downloaded",
                "value": {
                  "message": "Document already downloaded"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "auth_header": {
        "type": "apiKey",
        "description": "Authentication with `Authorization` header and `DeepL-Auth-Key` authentication scheme",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "ApiKeyId": {
        "description": "API key ID. Consists of two valid GUIDs separated by a colon.",
        "type": "string",
        "example": "ca7d5694-96eb-4263-a9a4-7f7e4211529e:20c2abcf-4c3c-4cd6-8ae8-8bd2a7d4da38"
      },
      "ApiKeyLabel": {
        "description": "API key label. The default value is `DeepL API Key`.",
        "type": "string",
        "example": "developer key prod"
      },
      "ApiKeyUsageCharacters": {
        "description": "Restricts the number of total characters (across text translation, document translation, and text improvement) that can be consumed by an API key in a one-month usage period.\nSetting the limit to `0` means the API key will not be able to consume characters.\nSetting the limit to `null` disables the limit, effectively allowing unlimited usage.\n",
        "type": "number",
        "example": 5000
      },
      "ApiKey": {
        "description": "The API key.",
        "type": "object",
        "properties": {
          "key_id": {
            "$ref": "#/components/schemas/ApiKeyId"
          },
          "label": {
            "$ref": "#/components/schemas/ApiKeyLabel"
          },
          "creation_time": {
            "description": "Timestamp when the key was created (ISO 8601 format)",
            "type": "string",
            "example": "2025-07-08T08:15:29.362Z"
          },
          "deactivated_time": {
            "description": "Timestamp when the key was deactivated (ISO 8601 format). The default value is `null`.",
            "type": "string",
            "example": "2025-07-09T08:15:29.362Z"
          },
          "is_deactivated": {
            "description": "Flag indicating whether the API key is deactivated. The default value is `false`.",
            "type": "boolean",
            "example": true
          },
          "usage_limits": {
            "description": "Usage limits for the API key.",
            "type": "object",
            "properties": {
              "characters": {
                "$ref": "#/components/schemas/ApiKeyUsageCharacters"
              }
            }
          }
        }
      },
      "Context": {
        "description": "The `context` parameter makes it possible to include additional context that can influence a translation but is not translated itself. \nThis additional context can potentially improve translation quality when translating short, low-context source texts such \nas product names on an e-commerce website, article headlines on a news website, or UI elements.\n\n\nFor example...\n  - When translating a product name, you might pass the product description as context. \n  - When translating a news article headline, you might pass the first few sentences or a summary of the article as context.\n\n\nFor best results, we recommend sending a few complete sentences of context in the same language as the source text. \nThere is no size limit for the `context` parameter itself, but the request body size limit of 128 KiB still applies to \nall text translation requests. \n\n\nIf you send a request with multiple `text` parameters, the `context` parameter will be applied to each one. \n\n\nCharacters included in the `context` parameter will not be counted toward billing (i.e. there is no additional \ncost for using the `context` parameter, and only characters sent in the text parameter(s) will be counted toward \nbilling for text translation even when the `context` parameter is included in a request).",
        "type": "string"
      },
      "CreateMultilingualGlossaryParameters": {
        "type": "object",
        "required": [
          "name",
          "dictionaries"
        ],
        "properties": {
          "name": {
            "description": "Name to be associated with the glossary.",
            "type": "string",
            "example": "My Glossary"
          },
          "dictionaries": {
            "description": "Dictionaries to populate the glossary with.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlossaryDictionary"
            }
          }
        }
      },
      "CreateGlossaryParameters": {
        "type": "object",
        "required": [
          "name",
          "source_lang",
          "target_lang",
          "entries",
          "entries_format"
        ],
        "properties": {
          "name": {
            "description": "Name to be associated with the glossary.",
            "type": "string",
            "example": "My Glossary"
          },
          "source_lang": {
            "$ref": "#/components/schemas/GlossarySourceLanguage"
          },
          "target_lang": {
            "$ref": "#/components/schemas/GlossaryTargetLanguage"
          },
          "entries": {
            "description": "The entries of the glossary. The entries have to be specified in the format provided by the `entries_format` parameter.",
            "type": "string",
            "example": "Hello\tGuten Tag"
          },
          "entries_format": {
            "description": "The format in which the glossary entries are provided. Formats currently available:\n- `tsv` (default) - tab-separated values\n- `csv` - comma-separated values\n\nSee [Supported Glossary Formats](https://www.deepl.com/docs-api/glossaries/formats) for details about each format.",
            "type": "string",
            "enum": [
              "tsv",
              "csv"
            ],
            "example": "tsv",
            "default": "tsv"
          }
        }
      },
      "DocumentTranslationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "detailed error message"
          }
        }
      },
      "DocumentKey": {
        "type": "object",
        "required": [
          "document_key"
        ],
        "properties": {
          "document_key": {
            "description": "The document encryption key that was sent to the client when the document was uploaded to the API.",
            "type": "string",
            "example": "0CB0054F1C132C1625B392EADDA41CB754A742822F6877173029A6C487E7F60A"
          }
        }
      },
      "Formality": {
        "description": "Sets whether the translated text should lean towards formal or informal language.\nThis feature currently only works for target languages\n`DE` (German),\n`FR` (French),\n`IT` (Italian),\n`ES` (Spanish),\n`NL` (Dutch),\n`PL` (Polish),\n`PT-BR` and `PT-PT` (Portuguese),\n`JA` (Japanese),\nand `RU` (Russian).\nLearn more about the plain/polite feature for Japanese [here](https://support.deepl.com/hc/en-us/articles/6306700061852-About-the-plain-polite-feature-in-Japanese).\nSetting this parameter with a target language that does not support formality will fail,\nunless one of the `prefer_...` options are used.\nPossible options are:\n  * `default` (default)\n  * `more` - for a more formal language\n  * `less` - for a more informal language\n  * `prefer_more` - for a more formal language if available, otherwise fallback to default formality\n  * `prefer_less` - for a more informal language if available, otherwise fallback to default formality",
        "type": "string",
        "enum": [
          "default",
          "more",
          "less",
          "prefer_more",
          "prefer_less"
        ],
        "default": "default"
      },
      "GlossaryDictionary": {
        "type": "object",
        "description": "A dictionary contained in a multilingual glossary. Each dictionary contains the mapping of source terms to target language terms.",
        "properties": {
          "source_lang": {
            "$ref": "#/components/schemas/GlossarySourceLanguage"
          },
          "target_lang": {
            "$ref": "#/components/schemas/GlossaryTargetLanguage"
          },
          "entries": {
            "$ref": "#/components/schemas/GlossaryEntries"
          },
          "entries_format": {
            "$ref": "#/components/schemas/GlossaryEntriesFormat"
          }
        }
      },
      "GlossaryEntries": {
        "type": "string",
        "description": "The entries of the glossary. The entries have to be specified in the format provided by the `entries_format` parameter.",
        "example": "Hello\tGuten Tag"
      },
      "GlossaryEntriesFormat": {
        "description": "The format in which the glossary entries are provided. Formats currently available:\n- `tsv` (default) - tab-separated values\n- `csv` - comma-separated values\n\nSee [Supported Glossary Formats](https://www.deepl.com/docs-api/glossaries/formats) for details about each format.",
        "type": "string",
        "enum": [
          "tsv",
          "csv"
        ],
        "example": "tsv",
        "default": "tsv"
      },
      "GlossaryEntryCount": {
        "description": "The number of entries in the glossary.",
        "type": "integer"
      },
      "GlossaryId": {
        "type": "string",
        "description": "A unique ID assigned to a glossary.",
        "example": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7"
      },
      "GlossaryName": {
        "description": "Name associated with the glossary.",
        "type": "string"
      },
      "GlossarySourceLanguage": {
        "type": "string",
        "description": "The language in which the source texts in the glossary are specified.",
        "enum": [
          "ar",
          "bg",
          "cs",
          "da",
          "de",
          "el",
          "en",
          "es",
          "et",
          "fi",
          "fr",
          "he",
          "hu",
          "id",
          "it",
          "ja",
          "ko",
          "lt",
          "lv",
          "nb",
          "nl",
          "pl",
          "pt",
          "ro",
          "ru",
          "sk",
          "sl",
          "sv",
          "th",
          "tr",
          "uk",
          "vi",
          "zh"
        ],
        "example": "en"
      },
      "GlossaryTargetLanguage": {
        "type": "string",
        "description": "The language in which the target texts in the glossary are specified.",
        "enum": [
          "ar",
          "bg",
          "cs",
          "da",
          "de",
          "el",
          "en",
          "es",
          "et",
          "fi",
          "fr",
          "he",
          "hu",
          "id",
          "it",
          "ja",
          "ko",
          "lt",
          "lv",
          "nb",
          "nl",
          "pl",
          "pt",
          "ro",
          "ru",
          "sk",
          "sl",
          "sv",
          "th",
          "tr",
          "uk",
          "vi",
          "zh"
        ],
        "example": "de"
      },
      "ModelType": {
        "type": "string",
        "description": "Specifies which DeepL model should be used for translation.\n\nPossible values are:\n* `latency_optimized` (default) - uses lower latency \u201cclassic\u201d translation models, which support all language pairs;\n  default value\n* `quality_optimized` - uses higher latency, improved quality \u201cnext-gen\u201d translation models, which support only a\n  subset of language pairs; if a language pair that is not supported by next-gen models is included in the\n  request, it will fail. Consider using prefer_quality_optimized instead.\n* `prefer_quality_optimized` - prioritizes use of higher latency, improved quality \u201cnext-gen\u201d translation models,\n  which support only a subset of DeepL languages; if a request includes a language pair not supported by\n  next-gen models, the request will fall back to latency_optimized classic models.",
        "enum": [
          "quality_optimized",
          "prefer_quality_optimized",
          "latency_optimized"
        ]
      },
      "MonolingualGlossary": {
        "type": "object",
        "properties": {
          "glossary_id": {
            "$ref": "#/components/schemas/GlossaryId"
          },
          "name": {
            "$ref": "#/components/schemas/GlossaryName"
          },
          "ready": {
            "description": "Indicates if the newly created glossary can already be used in `translate` requests.\nIf the created glossary is not yet ready, you have to wait and check the `ready` status\nof the glossary before using it in a `translate` request.",
            "type": "boolean"
          },
          "source_lang": {
            "$ref": "#/components/schemas/GlossarySourceLanguage"
          },
          "target_lang": {
            "$ref": "#/components/schemas/GlossaryTargetLanguage"
          },
          "creation_time": {
            "description": "The creation time of the glossary in the ISO 8601-1:2019 format (e.g.: `2021-08-03T14:16:18.329Z`).",
            "type": "string",
            "format": "date-time"
          },
          "entry_count": {
            "$ref": "#/components/schemas/GlossaryEntryCount"
          }
        },
        "example": {
          "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
          "ready": true,
          "name": "My Glossary",
          "source_lang": "en",
          "target_lang": "de",
          "creation_time": "2021-08-03T14:16:18.329Z",
          "entry_count": 1
        }
      },
      "MultilingualGlossary": {
        "type": "object",
        "properties": {
          "glossary_id": {
            "$ref": "#/components/schemas/GlossaryId"
          },
          "name": {
            "$ref": "#/components/schemas/GlossaryName"
          },
          "dictionaries": {
            "description": "List of dictionaries contained in this glossary.\nEach dictionary contains a source and target language, as well as pairs of source and target entries.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlossaryDictionary"
            }
          },
          "creation_time": {
            "description": "The creation time of the glossary in the ISO 8601-1:2019 format (e.g.: `2021-08-03T14:16:18.329Z`).",
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
          "name": "My Glossary",
          "dictionaries": [
            {
              "source_lang": "en",
              "target_lang": "de",
              "entry_count": 1
            }
          ],
          "creation_time": "2021-08-03T14:16:18.329Z"
        }
      },
      "MultilingualGlossaryEntries": {
        "type": "object",
        "properties": {
          "source_lang": {
            "$ref": "#/components/schemas/GlossarySourceLanguage"
          },
          "target_lang": {
            "$ref": "#/components/schemas/GlossaryTargetLanguage"
          },
          "entries": {
            "$ref": "#/components/schemas/GlossaryEntries"
          },
          "entries_format": {
            "$ref": "#/components/schemas/GlossaryEntriesFormat"
          }
        }
      },
      "MultilingualGlossaryEntriesResponse": {
        "type": "object",
        "properties": {
          "dictionaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MultilingualGlossaryEntriesInformation"
            }
          }
        }
      },
      "MultilingualGlossaryEntriesInformation": {
        "type": "object",
        "properties": {
          "source_lang": {
            "$ref": "#/components/schemas/GlossarySourceLanguage"
          },
          "target_lang": {
            "$ref": "#/components/schemas/GlossaryTargetLanguage"
          },
          "entry_count": {
            "$ref": "#/components/schemas/GlossaryEntryCount"
          }
        }
      },
      "OutlineDetectionOption": {
        "description": "The automatic detection of the XML structure won't yield best results in all XML files. You can disable this automatic mechanism altogether by setting the `outline_detection` parameter to `false` and selecting the tags that should be considered structure tags. This will split sentences using the `splitting_tags` parameter.\n\n\nIn the example below, we achieve the same results as the automatic engine by disabling automatic detection with `outline_detection=0` and setting the parameters manually to `tag_handling=xml`, `split_sentences=nonewlines`,  and `splitting_tags=par,title`.\n * Example request:\n   ```\n   <document>\n     <meta>\n       <title>A document's title</title>\n     </meta>\n     <content>\n       <par>This is the first sentence. Followed by a second one.</par>\n       <par>This is the third sentence.</par>\n     </content>\n   </document>\n   ```\n * Example response:\n   ```\n   <document>\n     <meta>\n       <title>Der Titel eines Dokuments</title>\n     </meta>\n     <content>\n       <par>Das ist der erste Satz. Gefolgt von einem zweiten.</par>\n       <par>Dies ist der dritte Satz.</par>\n     </content>\n   </document>\n   ```\nWhile this approach is slightly more complicated, it allows for greater control over the structure of the translation output.",
        "type": "boolean",
        "default": true
      },
      "OutlineDetectionOptionStr": {
        "description": "The automatic detection of the XML structure won't yield best results in all XML files. You can disable this automatic mechanism altogether by setting the `outline_detection` parameter to `0` and selecting the tags that should be considered structure tags. This will split sentences using the `splitting_tags` parameter.\n\n\nIn the example below, we achieve the same results as the automatic engine by disabling automatic detection with `outline_detection=0` and setting the parameters manually to `tag_handling=xml`, `split_sentences=nonewlines`,  and `splitting_tags=par,title`.\n * Example request:\n   ```\n   <document>\n     <meta>\n       <title>A document's title</title>\n     </meta>\n     <content>\n       <par>This is the first sentence. Followed by a second one.</par>\n       <par>This is the third sentence.</par>\n     </content>\n   </document>\n   ```\n * Example response:\n   ```\n   <document>\n     <meta>\n       <title>Der Titel eines Dokuments</title>\n     </meta>\n     <content>\n       <par>Das ist der erste Satz. Gefolgt von einem zweiten.</par>\n       <par>Dies ist der dritte Satz.</par>\n     </content>\n   </document>\n   ```\nWhile this approach is slightly more complicated, it allows for greater control over the structure of the translation output.",
        "type": "string",
        "enum": [
          "0"
        ]
      },
      "PatchMultilingualGlossaryParameters": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/GlossaryId"
          },
          "dictionaries": {
            "description": "Dictionaries to edit the glossary with. Currently only supports 0 or 1 dictionaries in the array.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlossaryDictionary"
            }
          }
        }
      },
      "PreserveFormattingOption": {
        "description": "Sets whether the translation engine should respect the original formatting, even if it would usually correct some aspects.\n\nThe formatting aspects affected by this setting include:\n * Punctuation at the beginning and end of the sentence\n * Upper/lower case at the beginning of the sentence",
        "type": "boolean",
        "default": false
      },
      "PreserveFormattingOptionStr": {
        "description": "Sets whether the translation engine should respect the original formatting, even if it would usually correct some aspects. Possible values are:\n * `0` (default)\n * `1`\n\nThe formatting aspects affected by this setting include:\n * Punctuation at the beginning and end of the sentence\n * Upper/lower case at the beginning of the sentence",
        "type": "string",
        "enum": [
          "0",
          "1"
        ],
        "default": "0"
      },
      "PutMultilingualGlossaryParameters": {
        "$ref": "#/components/schemas/MultilingualGlossaryEntries"
      },
      "ShowBilledCharacters": {
        "description": "When true, the response will include the billed_characters parameter, giving the \nnumber of characters from the request that will be counted by DeepL for billing purposes.",
        "type": "boolean"
      },
      "SplitSentencesOption": {
        "description": "Sets whether the translation engine should first split the input into sentences. For text translations where \n`tag_handling` is not set to `html`, the default value is `1`, meaning the engine splits on punctuation and on newlines.\n\nFor text translations where `tag_handling=html`, the default value is `nonewlines`, meaning the engine splits on punctuation only, ignoring newlines.  \n\nThe use of `nonewlines` as the default value for text translations where `tag_handling=html` is new behavior that was implemented in November 2022, \nwhen HTML handling was moved out of beta. \n\nPossible values are: \n\n * `0` - no splitting at all, whole input is treated as one sentence\n * `1` (default when `tag_handling` is not set to `html`) - splits on punctuation and on newlines\n * `nonewlines` (default when `tag_handling=html`) - splits on punctuation only, ignoring newlines\n\nFor applications that send one sentence per text parameter, we recommend setting `split_sentences` to `0`, in order to prevent the engine from splitting the sentence unintentionally.\n\n\nPlease note that newlines will split sentences when `split_sentences=1`. We recommend cleaning files so they don't contain breaking sentences or setting the parameter `split_sentences` to `nonewlines`.",
        "type": "string",
        "enum": [
          "0",
          "1",
          "nonewlines"
        ],
        "default": "1"
      },
      "SourceLanguage": {
        "type": "string",
        "description": "Language of the text to be translated. Options currently available:\n * `AR` - Arabic\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokm\u00e5l)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (all Portuguese varieties mixed)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese\n\nIf this parameter is omitted, the API will attempt to detect the language of the text and translate it.",
        "enum": [
          "AR",
          "BG",
          "CS",
          "DA",
          "DE",
          "EL",
          "EN",
          "ES",
          "ET",
          "FI",
          "FR",
          "HU",
          "ID",
          "IT",
          "JA",
          "KO",
          "LT",
          "LV",
          "NB",
          "NL",
          "PL",
          "PT",
          "RO",
          "RU",
          "SK",
          "SL",
          "SV",
          "TR",
          "UK",
          "ZH"
        ],
        "example": "EN"
      },
      "SourceLanguageText": {
        "type": "string",
        "description": "Language of the text to be translated. Options currently available:\n * `AR` - Arabic\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HE` - Hebrew [1]\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokm\u00e5l)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (all Portuguese varieties mixed)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TH` - Thai [1]\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `VI` - Vietnamese [1]\n * `ZH` - Chinese\n\nIf this parameter is omitted, the API will attempt to detect the language of the text and translate it.\n\n[1] Please note that Hebrew, Thai, and Vietnamese have not yet been added to the `/languages` endpoint \nbecause they does not yet support document translation; only text translation is supported for those\nlanguages at this time. When document translation support is added for Hebrew, Thai, and Vietnamese, \nwe will a) remove this note and b) add Hebrew, Thai, and Vietnamese to the `/languages` endpoint.",
        "enum": [
          "AR",
          "BG",
          "CS",
          "DA",
          "DE",
          "EL",
          "EN",
          "ES",
          "ET",
          "FI",
          "FR",
          "HE",
          "HU",
          "ID",
          "IT",
          "JA",
          "KO",
          "LT",
          "LV",
          "NB",
          "NL",
          "PL",
          "PT",
          "RO",
          "RU",
          "SK",
          "SL",
          "SV",
          "TH",
          "TR",
          "UK",
          "VI",
          "ZH"
        ],
        "example": "EN"
      },
      "TagHandlingOption": {
        "description": "Sets which kind of tags should be handled. Options currently available:\n * `xml`: Enable XML tag handling; see [XML Handling](https://www.deepl.com/docs-api/xml).\n * `html`: Enable HTML tag handling; see [HTML Handling](https://www.deepl.com/docs-api/html).",
        "type": "string",
        "enum": [
          "xml",
          "html"
        ]
      },
      "UsageResponse": {
        "type": "object",
        "properties": {
          "character_count": {
            "description": "Characters translated so far in the current billing period.",
            "type": "integer",
            "format": "int64",
            "example": 180118
          },
          "character_limit": {
            "description": "Current maximum number of characters that can be translated per billing period. If cost control is set, the cost control limit will be returned in this field.",
            "type": "integer",
            "format": "int64",
            "example": 1250000
          },
          "products": {
            "type": "array",
            "description": "Only present for API Pro users. Per-product usage details.",
            "items": {
              "type": "object",
              "properties": {
                "product_type": {
                  "type": "string",
                  "description": "The type of product (e.g., 'write', 'translate').",
                  "example": "write"
                },
                "api_key_character_count": {
                  "type": "integer",
                  "description": "Characters used for this product by this API key in the current period.",
                  "example": 0
                },
                "character_count": {
                  "type": "integer",
                  "description": "Total characters used for this product in the current period.",
                  "example": 5643
                }
              }
            }
          },
          "api_key_character_count": {
            "type": "integer",
            "description": "Only present for API Pro users. Total characters used by this API key in the current period.",
            "example": 636
          },
          "api_key_character_limit": {
            "type": "integer",
            "description": "Only present for API Pro users. Character limit for this API key in the current period.",
            "example": 1000000000000
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Only present for API Pro users. Start time of the current billing period (ISO 8601).",
            "example": "2025-05-13T09:18:42Z"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "Only present for API Pro users. End time of the current billing period (ISO 8601).",
            "example": "2025-06-13T09:18:42Z"
          }
        }
      },
      "NonSplittingTagCommaSeparatedList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagCommaSeparatedList"
          }
        ],
        "description": "Comma-separated list of XML tags which never split sentences.\n\n\nFor some XML files, finding tags with textual content and splitting sentences using those tags won't yield the best results. The following example shows the engine splitting sentences on `par` tags and proceeding to translate the parts separately, resulting in an incorrect translation:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, es sei eine gute Idee gewesen.</par><par> Durchf\u00fchrung einer internen Untersuchung.</par>\n```\n\n\nAs this can lead to bad translations, this type of structure should either be avoided, or the `non_splitting_tags` parameter should be set. The following example shows the same call, with the parameter set to `par`:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, dass sie</par><par> eine interne Untersuchung durchgef\u00fchrt</par><par> habe</par><par>.</par>\n```\n\n\nThis time, the sentence is translated as a whole. The XML tags are now considered markup and copied into the translated sentence. As the translation of the words \"had been\" has moved to another position in the German sentence, the two par tags are duplicated (which is expected here)."
      },
      "NonSplittingTagList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagList"
          }
        ],
        "description": "List of XML tags which never split sentences.\n\n\nFor some XML files, finding tags with textual content and splitting sentences using those tags won't yield the best results. The following example shows the engine splitting sentences on `par` tags and proceeding to translate the parts separately, resulting in an incorrect translation:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, es sei eine gute Idee gewesen.</par><par> Durchf\u00fchrung einer internen Untersuchung.</par>\n```\n\n\nAs this can lead to bad translations, this type of structure should either be avoided, or the `non_splitting_tags` parameter should be set. The following example shows the same call, with the parameter set to `par`:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, dass sie</par><par> eine interne Untersuchung durchgef\u00fchrt</par><par> habe</par><par>.</par>\n```\n\n\nThis time, the sentence is translated as a whole. The XML tags are now considered markup and copied into the translated sentence. As the translation of the words \"had been\" has moved to another position in the German sentence, the two par tags are duplicated (which is expected here)."
      },
      "SplittingTagCommaSeparatedList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagCommaSeparatedList"
          }
        ],
        "description": "Comma-separated list of XML tags which always cause splits.\n\n\nSee the example in the `outline_detection` parameter's description."
      },
      "SplittingTagList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagList"
          }
        ],
        "description": "List of XML tags which always cause splits.\n\n\nSee the example in the `outline_detection` parameter's description."
      },
      "IgnoreTagCommaSeparatedList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagCommaSeparatedList"
          }
        ],
        "description": "Comma-separated list of XML tags that indicate text not to be translated.\n\n\nUse this parameter to ensure that elements in the original text are not altered in the translation (e.g., trademarks, product names) and insert tags into your original text. In the following example, the `ignore_tags` parameter is set to `keep`:\n * Example request:\n   ```\n   Please open the page <keep>Settings</keep> to configure your system.\n   ```\n * Example response:\n   ```\n   Bitte \u00f6ffnen Sie die Seite <keep>Settings</keep> um Ihr System zu konfigurieren.\n   ```"
      },
      "IgnoreTagList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TagList"
          }
        ],
        "description": "List of XML tags that indicate text not to be translated.\n\n\nUse this parameter to ensure that elements in the original text are not altered in the translation (e.g., trademarks, product names) and insert tags into your original text. In the following example, the `ignore_tags` parameter is set to `keep`:\n * Example request:\n   ```\n   Please open the page <keep>Settings</keep> to configure your system.\n   ```\n * Example response:\n   ```\n   Bitte \u00f6ffnen Sie die Seite <keep>Settings</keep> um Ihr System zu konfigurieren.\n   ```"
      },
      "TagCommaSeparatedList": {
        "description": "Comma-separated list of XML tags.",
        "type": "string",
        "example": "a,p,span"
      },
      "TagList": {
        "description": "List of XML tags.",
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "a",
          "p",
          "span"
        ]
      },
      "TargetLanguage": {
        "type": "string",
        "description": "The language into which the text should be translated. Options currently available:\n * `AR` - Arabic\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English (unspecified variant for backward compatibility; please select `EN-GB` or `EN-US` instead)\n * `EN-GB` - English (British)\n * `EN-US` - English (American)\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokm\u00e5l)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (unspecified variant for backward compatibility; please select `PT-BR` or `PT-PT` instead)\n * `PT-BR` - Portuguese (Brazilian)\n * `PT-PT` - Portuguese (all Portuguese varieties excluding Brazilian Portuguese)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese (unspecified variant for backward compatibility; please select `ZH-HANS` instead)\n * `ZH-HANS` - Chinese (simplified)\n * `ZH-HANT` - Chinese (traditional)",
        "enum": [
          "AR",
          "BG",
          "CS",
          "DA",
          "DE",
          "EL",
          "EN-GB",
          "EN-US",
          "ES",
          "ET",
          "FI",
          "FR",
          "HU",
          "ID",
          "IT",
          "JA",
          "KO",
          "LT",
          "LV",
          "NB",
          "NL",
          "PL",
          "PT-BR",
          "PT-PT",
          "RO",
          "RU",
          "SK",
          "SL",
          "SV",
          "TR",
          "UK",
          "ZH",
          "ZH-HANS",
          "ZH-HANT"
        ],
        "example": "DE"
      },
      "TargetLanguageText": {
        "type": "string",
        "description": "The language into which the text should be translated. Options currently available:\n * `AR` - Arabic\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English (unspecified variant for backward compatibility; please select `EN-GB` or `EN-US` instead)\n * `EN-GB` - English (British)\n * `EN-US` - English (American)\n * `ES` - Spanish\n * `ES-419` - Spanish (Latin American) [1]\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HE` - Hebrew [1]\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokm\u00e5l)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (unspecified variant for backward compatibility; please select `PT-BR` or `PT-PT` instead)\n * `PT-BR` - Portuguese (Brazilian)\n * `PT-PT` - Portuguese (all Portuguese variants excluding Brazilian Portuguese)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TH` - Thai [1]\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `VI` - Vietnamese [1]\n * `ZH` - Chinese (unspecified variant for backward compatibility; please select `ZH-HANS` or `ZH-HANT` instead)\n * `ZH-HANS` - Chinese (simplified)\n * `ZH-HANT` - Chinese (traditional)\n\n[1] Please note that Hebrew, Latin American Spanish, Thai, and Vietnamese have not yet been added to\nthe `/languages` endpoint because they does not yet support document translation; only text translation\nis supported for those languages at this time. When document translation support is added for Hebrew, Thai,\nand Vietnamese, we will a) remove this note and b) add Hebrew, Thai, and Vietnamese to the `/languages` endpoint.",
        "enum": [
          "AR",
          "BG",
          "CS",
          "DA",
          "DE",
          "EL",
          "EN-GB",
          "EN-US",
          "ES",
          "ET",
          "FI",
          "FR",
          "HE",
          "HU",
          "ID",
          "IT",
          "JA",
          "KO",
          "LT",
          "LV",
          "NB",
          "NL",
          "PL",
          "PT-BR",
          "PT-PT",
          "RO",
          "RU",
          "SK",
          "SL",
          "SV",
          "TH",
          "TR",
          "UK",
          "VI",
          "ZH",
          "ZH-HANS",
          "ZH-HANT"
        ],
        "example": "DE"
      },
      "TargetLanguageWrite": {
        "type": "string",
        "description": "The language for the text improvement. Options currently available:\n * `de` - German\n * `en` - English (unspecified variant, defaults to `en-US`)\n * `en-GB` - English (British)\n * `en-US` - English (American)\n * `es` - Spanish\n * `fr` - French\n * `it` - Italian\n * `pt` - Portuguese (unspecified variant, defaults to `pt-PT`)\n * `pt-BR` - Portuguese (Brazilian)\n * `pt-PT` - Portuguese (all Portuguese variants excluding Brazilian Portuguese)",
        "enum": [
          "de",
          "en",
          "en-GB",
          "en-US",
          "fr",
          "it",
          "pt",
          "pt-BR",
          "pt-PT"
        ],
        "example": "de"
      },
      "WritingStyle": {
        "type": "string",
        "description": "Specify a style to rephrase your text in a way that fits your audience and goals.\nThe `prefer_` prefix allows falling back to the default style if the language does not yet support styles.",
        "enum": [
          "academic",
          "business",
          "casual",
          "default",
          "simple",
          "prefer_academic",
          "prefer_business",
          "prefer_casual",
          "prefer_simple"
        ]
      },
      "WritingTone": {
        "type": "string",
        "description": "Specify the desired tone for your text.\nThe `prefer_` prefix allows falling back to the default tone if the language does not yet support tones.",
        "enum": [
          "confident",
          "default",
          "diplomatic",
          "enthusiastic",
          "friendly",
          "prefer_confident",
          "prefer_diplomatic",
          "prefer_enthusiastic",
          "prefer_friendly"
        ]
      }
    }
  }
}
